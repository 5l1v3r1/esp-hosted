/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: slave_config.proto */

#ifndef PROTOBUF_C_slave_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_slave_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CmdGetStatus CmdGetStatus;
typedef struct _RespGetStatus RespGetStatus;
typedef struct _CmdConfig CmdConfig;
typedef struct _RespConfig RespConfig;
typedef struct _SlaveConfigPayload SlaveConfigPayload;


/* --- enums --- */

typedef enum _EncryptionMode {
  ENCRYPTION_MODE__Type_Open = 0,
  ENCRYPTION_MODE__Type_WPA_PSK = 1,
  ENCRYPTION_MODE__Type_WPA2_PSK = 2,
  ENCRYPTION_MODE__Type_WPA_WPA2_PSK = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENCRYPTION_MODE)
} EncryptionMode;
typedef enum _SlaveConfigMsgType {
  SLAVE_CONFIG_MSG_TYPE__TypeCmdGetMACAddress = 0,
  SLAVE_CONFIG_MSG_TYPE__TypeRespGetMACAddress = 1,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdGetWiFiMode = 2,
  SLAVE_CONFIG_MSG_TYPE__TypeRespGetWiFiMode = 3,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdSetWiFiMode = 4,
  SLAVE_CONFIG_MSG_TYPE__TypeRespSetWiFiMode = 5,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdGetAPConfig = 6,
  SLAVE_CONFIG_MSG_TYPE__TypeRespGetAPConfig = 7,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdSetAPConfig = 8,
  SLAVE_CONFIG_MSG_TYPE__TypeRespSetAPConfig = 9,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdGetSoftAPConfig = 10,
  SLAVE_CONFIG_MSG_TYPE__TypeRespGetSoftAPConfig = 11,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdSetSoftAPConfig = 12,
  SLAVE_CONFIG_MSG_TYPE__TypeRespSetSoftAPConfig = 13,
  SLAVE_CONFIG_MSG_TYPE__TypeCmdDisconnectAP = 14,
  SLAVE_CONFIG_MSG_TYPE__TypeRespDisconnectAP = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SLAVE_CONFIG_MSG_TYPE)
} SlaveConfigMsgType;

/* --- messages --- */

struct  _CmdGetStatus
{
  ProtobufCMessage base;
  char *cmd;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define CMD_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_get_status__descriptor) \
    , NULL, 0,0 }


struct  _RespGetStatus
{
  ProtobufCMessage base;
  char *resp;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define RESP_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_get_status__descriptor) \
    , NULL, 0,0 }


struct  _CmdConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
};
#define CMD_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0 }


struct  _RespConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
};
#define RESP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0 }


typedef enum {
  SLAVE_CONFIG_PAYLOAD__PAYLOAD__NOT_SET = 0,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_MAC_ADDRESS = 10,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_MAC_ADDRESS = 11,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_WIFI_MODE = 12,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_WIFI_MODE = 13,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_WIFI_MODE = 14,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_WIFI_MODE = 15,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_AP_CONFIG = 16,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_AP_CONFIG = 17,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_AP_CONFIG = 18,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_AP_CONFIG = 19,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_SOFTAP_CONFIG = 20,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 21,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_SOFTAP_CONFIG = 22,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_SOFTAP_CONFIG = 23,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_CMD_DISCONNECT_AP = 24,
  SLAVE_CONFIG_PAYLOAD__PAYLOAD_RESP_DISCONNECT_AP = 25,
} SlaveConfigPayload__PayloadCase;

struct  _SlaveConfigPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg;
  SlaveConfigMsgType msg;
  SlaveConfigPayload__PayloadCase payload_case;
  union {
    CmdGetStatus *cmd_get_mac_address;
    RespGetStatus *resp_get_mac_address;
    CmdGetStatus *cmd_get_wifi_mode;
    RespGetStatus *resp_get_wifi_mode;
    CmdGetStatus *cmd_set_wifi_mode;
    RespGetStatus *resp_set_wifi_mode;
    CmdConfig *cmd_get_ap_config;
    RespConfig *resp_get_ap_config;
    CmdConfig *cmd_set_ap_config;
    RespConfig *resp_set_ap_config;
    CmdConfig *cmd_get_softap_config;
    RespConfig *resp_get_softap_config;
    CmdConfig *cmd_set_softap_config;
    RespConfig *resp_set_softap_config;
    CmdGetStatus *cmd_disconnect_ap;
    RespGetStatus *resp_disconnect_ap;
  };
};
#define SLAVE_CONFIG_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slave_config_payload__descriptor) \
    , 0,0, SLAVE_CONFIG_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* CmdGetStatus methods */
void   cmd_get_status__init
                     (CmdGetStatus         *message);
size_t cmd_get_status__get_packed_size
                     (const CmdGetStatus   *message);
size_t cmd_get_status__pack
                     (const CmdGetStatus   *message,
                      uint8_t             *out);
size_t cmd_get_status__pack_to_buffer
                     (const CmdGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CmdGetStatus *
       cmd_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_get_status__free_unpacked
                     (CmdGetStatus *message,
                      ProtobufCAllocator *allocator);
/* RespGetStatus methods */
void   resp_get_status__init
                     (RespGetStatus         *message);
size_t resp_get_status__get_packed_size
                     (const RespGetStatus   *message);
size_t resp_get_status__pack
                     (const RespGetStatus   *message,
                      uint8_t             *out);
size_t resp_get_status__pack_to_buffer
                     (const RespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
RespGetStatus *
       resp_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_get_status__free_unpacked
                     (RespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CmdConfig methods */
void   cmd_config__init
                     (CmdConfig         *message);
size_t cmd_config__get_packed_size
                     (const CmdConfig   *message);
size_t cmd_config__pack
                     (const CmdConfig   *message,
                      uint8_t             *out);
size_t cmd_config__pack_to_buffer
                     (const CmdConfig   *message,
                      ProtobufCBuffer     *buffer);
CmdConfig *
       cmd_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_config__free_unpacked
                     (CmdConfig *message,
                      ProtobufCAllocator *allocator);
/* RespConfig methods */
void   resp_config__init
                     (RespConfig         *message);
size_t resp_config__get_packed_size
                     (const RespConfig   *message);
size_t resp_config__pack
                     (const RespConfig   *message,
                      uint8_t             *out);
size_t resp_config__pack_to_buffer
                     (const RespConfig   *message,
                      ProtobufCBuffer     *buffer);
RespConfig *
       resp_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_config__free_unpacked
                     (RespConfig *message,
                      ProtobufCAllocator *allocator);
/* SlaveConfigPayload methods */
void   slave_config_payload__init
                     (SlaveConfigPayload         *message);
size_t slave_config_payload__get_packed_size
                     (const SlaveConfigPayload   *message);
size_t slave_config_payload__pack
                     (const SlaveConfigPayload   *message,
                      uint8_t             *out);
size_t slave_config_payload__pack_to_buffer
                     (const SlaveConfigPayload   *message,
                      ProtobufCBuffer     *buffer);
SlaveConfigPayload *
       slave_config_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slave_config_payload__free_unpacked
                     (SlaveConfigPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CmdGetStatus_Closure)
                 (const CmdGetStatus *message,
                  void *closure_data);
typedef void (*RespGetStatus_Closure)
                 (const RespGetStatus *message,
                  void *closure_data);
typedef void (*CmdConfig_Closure)
                 (const CmdConfig *message,
                  void *closure_data);
typedef void (*RespConfig_Closure)
                 (const RespConfig *message,
                  void *closure_data);
typedef void (*SlaveConfigPayload_Closure)
                 (const SlaveConfigPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    encryption_mode__descriptor;
extern const ProtobufCEnumDescriptor    slave_config_msg_type__descriptor;
extern const ProtobufCMessageDescriptor cmd_get_status__descriptor;
extern const ProtobufCMessageDescriptor resp_get_status__descriptor;
extern const ProtobufCMessageDescriptor cmd_config__descriptor;
extern const ProtobufCMessageDescriptor resp_config__descriptor;
extern const ProtobufCMessageDescriptor slave_config_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_slave_5fconfig_2eproto__INCLUDED */
